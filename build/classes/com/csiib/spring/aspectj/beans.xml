<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop.xsd">
	
<!--  
		1.创建目标bean
		2.创建通知类（Aspect类）
		3.织入（获得代理类）
-->

<!-- 1.目标类 -->
<bean id="userServiceId" class="com.csiib.spring.aspectj.UserServiceImpl"></bean>
<!--2. 切面类 -->
<bean id="myAspect" class="com.csiib.spring.aspectj.MyAspect"></bean>
<!--3.aop编程  -->

<aop:config>
	<aop:aspect ref="myAspect">
		<aop:pointcut expression="execution(* com.csiib.spring.aspectj.*.*(..))" id="myPointCut"/>
		<!--3.1 前置通知
		<aop:before method="" pointcut="" pointcut-ref=""/>
		method:通知，及方法名
		pointcut:切入点表达式   
		pointcut-ref:切入点引用，可以与其他通知共享切入点
		pointcut 与pointcut-ref 2选1
		通知方法可以有参数
		 -->
		 <!-- 3.2后置通知，目标方法后执行，可获得返回值
		 	通知放方法格式：public void afterReturning(JoinPoint joinPoint,Object ret)｛｝
		 	参数1：连接点描述
		 	参数2：返回值：目标方法的返回值
		  -->
		<!--  <aop:after-returning method="afterReturning" pointcut-ref="myPointCut" returning="ret"/> -->
		<!-- 	<aop:before method="before" pointcut-ref="myPointCut"/> -->
		
		<!--3.3环绕通知  
		<aop:around method="" pointcut-ref=""/>
		method:环绕通知方法
		pointcut-ref:切入点
		通知方法格式：public Object around(ProceedingJoinPoint joinPoint) throws Throwable{}
		-->
		 <aop:around method="around" pointcut-ref="myPointCut"/> 
		
		<!--3.4 抛异常通知  -->
		 <aop:after-throwing method="afterThrowing" pointcut-ref="myPointCut" throwing="e"/> 
	</aop:aspect>
</aop:config>
</beans>
